package com.interview.uuid.service;

import java.util.Random;

import org.springframework.stereotype.Service;

@Service
public class UuidService {
	/*You are being asked to simulate a UUID generator by creating sequences of numbers, written out as strings. 
	  If the resulting string is under 30 characters long, it should padded, if it’s over 40 characters long – 
	  then it should be truncated.

	Please create a REST API with SpringBoot endpoint that implements a function that generates these simulated 
	sequences. Possible parameters of x,y,z may be set with request.

	Use this the rule for generating number sequences:

	1.      start with a randomly generated (real) number
            ? real number? 4.123 is a real number, not an integer, no concept of even or odd.  So it must create an integer
            
	2.      If the number is even, then divide by x=2
            ? x=2 is an example or any x input from parameter?
            
	3.      If the number is odd then add y=7
            ? guess y = 7 is as an example like above.  should be any input y
            
	4.      Check for longest palindromic sub-sequence
            ? is 'check' a rule? It does not generate any number, how it can contribute to sequences?
            
	5.      At least z=5 that #2 & #3 should run to generate sequence
            ? #2 or #3 always run as an integer is either even or odd, not relation to z, why 5 as a rule???
            
	6.      At least half of numbers should be generated by lines # 2 and #3
	        ? which will generate numbers except #2 and #3?

	Think about testing and validation. Clearly state assumptions. Document your thinking.

	Please post your code to a public repo (github, bitbucket, …) and send the link to koncertmsp@koncertit.com. */
	
	
	/*
	 * As above rule to create uuid is not clear to me, I just use an easy way to create the sequences
	 */
	public String generateUuid(int x, int y, int z) {
		
		Random rand = new Random(); 
		int seed = 0;
		  
		StringBuffer sb = new StringBuffer();
        // Generate random integers in range 0 to 10 
		for(int i = 0; i < 40; i++) {
			seed = rand.nextInt(10); 
			
			if(seed % 2 == 0) {
				seed /= x;
			} else {
				seed += y;
			}
			sb.append(seed);
			
			if(sb.toString().length() > 40) {
				return sb.toString().substring(0, 40);
			}
		}
		
		return sb.toString();
	}
	/*
	 * Second version, just one random number, based on it and try to use rules as many as possible.
	 * My assumption is used previous generate sequence as base and use one of rule on it, then add it to
	 * the sequence.
	 */
	public String generateUuid2(int x, int y, int z) {
		
		Random rand = new Random(); 
		// Generate random integers in range 0 to 100000000, no reason chosen 100000000, just big enough so padding less at end
		int seed = rand.nextInt(100000000);
		  
		StringBuffer sb = new StringBuffer();
        
		sb.append(seed);
		int temp = seed;
		//#2 or #3
		if(seed % 2 == 0) {
			temp /= x;
		} else {
			temp += y;
		}
		sb.append(temp);
		
		//#4
		temp = Integer.valueOf(longestPalSubstr(sb.toString()));
		sb.append(temp);
		
		//#5 ?
		if(z >= 5) {
			//use #2 or #3 again
			if(temp % 2 == 0) {
				temp /= x;
			} else {
				temp += y;
			}
		}
		sb.append(temp);
		
		//padding or truncate
		int length = sb.toString().length();
		if(length > 40) {
			return sb.toString().substring(0, 40);
		}	
		
		if(length < 30) {
			for (int i = 0; i < 30-length; i++) {
				System.out.println("seed : " + seed + " len " + sb.toString().length());
				sb.append(rand.nextInt(10));
			}
		}
		
		
		return sb.toString();
	}

	//found online
	private String longestPalSubstr(String str) { 
		int maxLength = 1; 

		int start = 0; 
		int len = str.length(); 

		int low, high; 

		// One by one consider every character as center 
		// point of even and length palindromes 
		for (int i = 1; i < len; ++i) 
		{ 
			// Find the longest even length palindrome with 
			// center points as i-1 and i. 
			low = i - 1; 
			high = i; 
			while (low >= 0 && high < len 
					&& str.charAt(low) == str.charAt(high)) { 
				if (high - low + 1 > maxLength) { 
					start = low; 
					maxLength = high - low + 1; 
				} 
				--low; 
				++high; 
			} 

			// Find the longest odd length palindrome with 
			// center point as i 
			low = i - 1; 
			high = i + 1; 
			while (low >= 0 && high < len 
					&& str.charAt(low) == str.charAt(high)) { 
				if (high - low + 1 > maxLength) { 
					start = low; 
					maxLength = high - low + 1; 
				} 
				--low; 
				++high; 
			} 
		} 

		System.out.println("Longest palindrome substring is: " + str.substring(start, start + maxLength)); 
		return str.substring(start, start + maxLength);

		
	} 
	
	
}
